WEBVTT

00:00:00.000 --> 00:00:06.596 
In WoT we are dealing with interacting with devices over the network.

00:00:06.596 --> 00:00:13.193 
Thus, we need to look at how such a communication is modelled.

00:00:13.193 --> 00:00:21.074 
The WoT focuses on the protocols that operate on the application layer that use TCP and UDP from

00:00:21.074 --> 00:00:28.956 
the transport layer. Thus, it is important to understand OSI layers and how sending and receiving data works.

00:00:28.956 --> 00:00:35.281 
Okay, so we were talking about sending JSON and changing the temperature before.

00:00:35.281 --> 00:00:42.218 
Let's assume that a temperature sensor has received a request from a dashboard to send its temperature value.

00:00:42.218 --> 00:00:46.931 
So let's see the magic behind the network.

00:00:46.931 --> 00:00:52.637 
Let's assume that we have the temperature data in the payload in the application layer of

00:00:52.637 --> 00:00:58.343 
the temperature sensor and we want to send it via a HTTP message to the dashboard.

00:00:58.343 --> 00:01:05.883 
Application Layer is an abstraction layer service that masks the rest of the application from the transmission process.

00:01:05.883 --> 00:01:11.733 
Then our payload, moves to the Presentation Layer, where our data will be encrypted.

00:01:11.733 --> 00:01:20.646 
After that encryption comes the Session Layer, where we open a session with the device we want to talk with.

00:01:20.646 --> 00:01:23.171 
Next layer is the Transport Layer.

00:01:23.171 --> 00:01:30.946 
This layer includes protocols like TCP or UDP which are meant to route data from sender to receiver.

00:01:30.946 --> 00:01:36.696 
In this layer, all the information that we have in the application layer

00:01:36.696 --> 00:01:42.446 
is encapsulated as payload and TCP or UDP add their own headers.

00:01:42.446 --> 00:01:52.487 
Then Network Layer comes, where we define how the devices linked together and how they communicate inside the network.

00:01:52.487 --> 00:01:59.565 
For example: information about the IP address is handled in that layer.

00:01:59.565 --> 00:02:07.148 
In Datalink Layer, it is defined how to structure bits into data.

00:02:07.148 --> 00:02:15.309 
For example: information about the MAC address is handled in that layer.

00:02:15.309 --> 00:02:20.621 
And lastly, our package arrive to the Physical Layer, where the raw bit

00:02:20.621 --> 00:02:25.934 
streams are transmitted over a physical medium such as Ethernet cable or Wi-Fi.

00:02:25.934 --> 00:02:32.190 
To sum up, we had the temperature data in our sensor and pass it down the OSI

00:02:32.190 --> 00:02:38.446 
layers to change the temperature value in the dashboard. These two are interacting through the network.

00:02:38.446 --> 00:02:42.909 
Performing this we were able to send the temperature data.

00:02:42.909 --> 00:02:50.121 
In order for the dashboard to receive the data, it has to go through all the OSI layers but in

00:02:50.121 --> 00:02:57.334 
reverse order. At the end of the process , we can observe that the temperature will change on the indicator.

00:02:57.334 --> 00:03:00.043 
There are different Network Topologies such as

00:03:00.043 --> 00:03:04.602 
Server Client Model, Broker Client Model, Peer to Peer Model.

00:03:04.602 --> 00:03:12.130 
In all of these, the underlying network technology is not changing much but rather how you connect the nodes themselves.

00:03:12.130 --> 00:03:18.468 
WoT can be applied on different network device topologies. It is not constrained to any of them.

00:03:18.468 --> 00:03:25.568 
One of the most widely used is Server Client Model. It consist of «a server» and one or more clients.

00:03:25.568 --> 00:03:30.649 
In this model, the server is reactive, and the client is proactive meaning

00:03:30.649 --> 00:03:35.731 
that the server waits for the request and responds to the clients.

00:03:35.731 --> 00:03:41.743 
Common Server-Client Protocols are HTTP, WebSocket and CoAP.

00:03:41.743 --> 00:03:49.806 
If server and client are very tightly coupled, it is very hard one to evolve independently from another.

00:03:49.806 --> 00:03:55.751 
There are architectures that ensure they are not tightly coupled, like REST. Similar to

00:03:55.751 --> 00:04:01.697 
REST, WoT also encourages systems that are not tightly coupled. The REST concept where

00:04:01.697 --> 00:04:07.643 
every resource has URI is also a primary design choice of the WoT.

00:04:07.643 --> 00:04:12.193 
Second model we will explain is Broker Client Model.

00:04:12.193 --> 00:04:19.231 
In this model, multiple clients are connected to a central broker. Also, it is referred as

00:04:19.231 --> 00:04:26.268 
Publisher-Subscriber. However, Broker- Client is more specific since there can be PubSub without a broker.

00:04:26.268 --> 00:04:31.037 
Broker does not contain any application logic, it simply a router that

00:04:31.037 --> 00:04:35.806 
receives messages and sends them to the clients that are listening.

00:04:35.806 --> 00:04:39.999 
In this model, if one of the clients is inactive, data

00:04:39.999 --> 00:04:44.193 
sent by broker waits for the clients to be active again.

00:04:44.193 --> 00:04:48.381 
This feature is called decoupling of time.

00:04:48.381 --> 00:04:55.799 
Or it can happen the other way around as well. For example, 2 clients can

00:04:55.799 --> 00:05:03.218 
send data to Broker and Broker distribute it to the other client or clients.

00:05:03.218 --> 00:05:07.781 
And the last one is Peer to Peer Model. This is a true

00:05:07.781 --> 00:05:12.343 
distributed system where there is no single point to get data from.

00:05:12.343 --> 00:05:17.956 
Examples of this model are BitTorrent and OPC UA PubSub.

00:05:17.956 --> 00:05:22.631 
In this video we explained the OSI Layers.

00:05:22.631 --> 00:05:28.768 
You can proceed to the next tutorial by clicking on the card or the video description.

